
                                                                        /// ЗАДАЧА 1 - Проверка символов в строке на уникальность

// Задание: Написать функцию которая принимает строку как свой единственный параментр и возвращает true если строка содержит только уникальные символы

                                                                        // Решение: 1

func sort1(input: String) -> Bool {
    
    var checkedSymbols = [Character]()
    
    for symbol in input{
        
        if checkedSymbols.contains(symbol){
            return false
        }
        
        checkedSymbols.append(symbol)
    }
    
    return true
}

sort1(input: "Helo,wrd")

/*
1. Создали функцию sort1, которая принимает строку и возвращает Bool
2. Создали массив Character
3. C помощью цикла for-in проверяем содержит ли наш массив исходный символ, если содержит - проверка окончена и мы имеем false
4. Если не содержит то мы добавляем этот символ в наш массив
 */


// Решение имеет недостаток тк функция contains проходит по всему массиву Character

                                                                        // Решение: 2 - Через структуру set - Set(Множества) похожи на массив но может содержать только уникальные значения

func sort2(input: String) -> Bool{
    return Set(input).count == input.count
}

sort2(input: "Helo, Wrd")


/*
1. Создали функцию sort2, которая принимает строку и возвращает Bool
2. В теле функции возвращаем условие. Если кол-во символов в Set = кол-во символов в исходной строке тогда эта строка имеет только уникальные значения, в противном случае false
*/



                                                                        /// ЗАДАЧА 2 -  Является ли строка палиндромом?

/* Задание: Написать функцию которая принимает строку как свой единственный параметр и возвращает true если это строка может быть прочитана одинаково как слева направо так и справа налево
игнорируя регистр(т.е строка является палиндромом - "А роза упала на лапу Азора", "казак")
*/

                                                                        // Решение: 1

func check(name: String) -> Bool{
    let lowercased = name.lowercased()
    return String(lowercased.reversed()) == lowercased
}

check(name: "Казак")


                                                                        /// ЗАДАЧА 3 - Идентичны ли между собой две строки?

// Задание: Написать функцию которая принимает две строки и возращает true если эти строки содержать одни и те же символы в любом порядке с учетом регистра.

                                                                        // Решение: 1 - Сказывается на производительности. Вызывая такие методы как firstIndex и remove мы проходимся по всей строке заново раз за разом

func check1(string1: String, string2: String) -> Bool{
    var checkString = string2
    for letter in string1{
        if let index = checkString.firstIndex(of: letter){
            checkString.remove(at: index)}
        else{
            return false
        }
    }
    return checkString.count == 0
}

check1(string1: "Abc", string2: "abc")   // false потому что регистр отличается
check1(string1: "auto", string2: "utoa") // true потому что буквы совпадают даже в любом порядке

/*
1.Мы создали функцию check1 которая принимает 2 строки и возвращает Bool выражение
2.В теле функции создали переменную checkString и присвоили ей значение 2-ой строки
3.Далее используем for-in для первой строки: мы проверяем каждый символ 1-ой строки содержится ли он во 2-ой строке, если содержится мы удаляем этот символ из второй строки
4.Если не содержится возвращаем false
5.Если итерации по 1-ой строке закончились тогда мы возвращаем true в том случае если 2-я строка пустая и наоборот
*/

                                                                        // Решение: 2

func check2(string1: String, string2: String) -> Bool{
    return string1.sorted() == string2.sorted()
}

check2(string1: "toua", string2: "auto") // Регистр учитывается

/*
1.Мы создали функцию check2 которая принимает 2 строки и возвращает Bool выражение
2.Внутри функции мы применяем метод sorted к 1 и 2 строке для того чтобы узнать равны ли строки после сортировки
*/

                                                                        /// ЗАДАЧА 4 - Содержит ли одна строка другую?

// Задание: Написать функцию которая принимает одну строку и возвращает true если эта строка полностью содержится в другой строке игнория регистр

                                                                        // Решение: 1

import Foundation

var str1 = "Hello, Swift"
str1.contains("Swift")

extension String {
    func customContains(_ string: String) -> Bool {
        return self.lowercased().contains(string.lowercased())
    }
}
    
str1.customContains("swift") // Выводим true даже если регистр не совпадает (мы его игнорируем)

/*
1. Создаем расширение с функцией (customContains)
2. Функция принимает строку и возвращает Bool
3. Внутри мы возвращаем ту же самую строку только в нижнем регистре
*/
    

                                                                        /// ЗАДАЧА 5 - Сколько раз символ встречается в строке?

// Задание: Написать функцию которая принимает строку и символ а далее возвращает количество раз которое данный символ встречается в строке с учетом регистра.

                                                                        // Решение: 1

func howManyTimes(name: String, count: Character) -> Int {
    var letterCount = 0 // Счетчик
    
    for letter in name {
        if letter == count { // Если мы встречаем наш символ то счетчик увеличивается на 1
            letterCount += 1
        }
    }
    return letterCount // Показывается финальное значение счетчика
}

/*
1. Функция принимает строку и символ
2. Функция возвращает Int (Сколько раз символ встречается в строке)
*/

howManyTimes(name: "Hello, Swift", count: "l") // В надписе Hello, Swift буква L встречается 2 раза

                                                                        // Решение: 2

func howManyTimes2(name: String, count: Character) -> Int {
    return name.reduce(0){ // Перебирает каждый элемент в коллекции и сводит их к одному значению
        $1 == count ? $0 + 1 : $0
    }
}


/*
1. Функция принимает строку и символ
2. Функция возвращает Int (Сколько раз символ встречается в строке)
3. Вызываем метод reduce и ставим 0
*/

howManyTimes2(name: "Hello, Swift", count: "l")

                                                                        /// ЗАДАЧА 6 - Удаление повторяющихся символов из строки

// Задание: Написать функцию которая принимает строку как свой единственный параметр и возвращает ту же самую строку только с удаленными повторяющимися символами ("hello" -> "helo")

                                                                        // Решение: 1

func sort12(string: String) -> String {
    var used = [Character]()
    
    for name in string {
        if !used.contains(name){
            used.append(name)
        }
    }
    return String(used)
}

sort12(string: "Hello")

/*
1. Создал функцию которая принимает и возвращает строку
2. used - массив символов
3. Цикл for-in. Если наш массив не содержит символ тогда мы добавляем этот символ в массив
4. Вернем наш массив приведенный к строке
*/


                                                                    /// ЗАДАЧА 7 - Сокращение количества пробелов до одного

// Задание: Написать функцию которая принимает строку как свой единственный параметр и возвращает ту же самую строку только с замененными множественными пробелами на единичный пробел
// Пример: "[space] [space] [space] a" -> "[space]a"

                                                                    // Решение: 1

func space(name: String) -> String {
    var num1 = false
    var num2 = ""
    
    for letter in name {
        if letter == " " {
            if num1 { continue }
            num1 = true
        } else {
            num1 = false
        }
        num2.append(letter)
    }
    return num2
}

space(name: "a     b") // Превращает в (a b)

/*
1. Создал функцию которая принимает и возвращает строку
2. Внутри функции две переменные: 1 - num1 (Показывает встречался ли пробел до этого); 2 - num2 (Пустая строка к которой будут добавляться символы и которую мы будем возврашать)
3. В цикле for-in где проводятся иттерации нашей входной строки т.е все символы кроме пробела будут добавляться в Num2, если встречается пробел и он встречается впервые мы меняем Num1 на true и добавлять этот пробел к другие
   символам
4. Когда значение num1 true мы используем continue для провести иттерацию со следующего символа т.е игнорируем второй пробел
*/


                                                                    /// ЗАДАЧА 8 - Вращение строки

// Задание: написать функцию которая принимает две строки и возвращает true если одна строка является вращением другой с учетом регистра (вращение строки - это когда мы берем символ с конца слова и переносим в начало)

                                                                    // Решение: 1

import Foundation

func rotate(name: String, rotated: String) -> Bool{
    guard name.count == rotated.count else { return false } // guard исполняет код только при получении false
    
    let combined = name + name
    
    return combined.contains(rotated)
}

rotate(name: "Hello", rotated: "loHel")

/*
1. Создаем функцию которая принимает исходную строку и превращенную и возвращает Bool
2. Убеждаемся что кол-во наших символов в строках одинаково, если нет возвращаем false (Делается через guard)
3. Создаем константу combined которая включает исходную удвоенную строку
4. Возвращаем из функции combined с методом contains и проверяем содержит ли наша удвоенная строка нашу превращенную строку
*/


